Table variables set operators

Set operators: union, intersect, except

e.g. If we want to find all pairs of students who have the same GPA => we need 2 instances of Student table.

SELECT *
FROM Student S1, Student S2
WHERE S1.GPA = S2.GPA        /*explitic join required in SQL */
AND S1.sID < S2.sID;         /*so we do not match the same person - we want distinct. List the one with the smallest sID first */


e.g. We want all ID of students who applied for major CS and EE

SELECT DISTINCT A1.sID
FROM Apply A1, Apply A2
WHERE A1.sID = A2.sID                     /* make sure they are the same student */
AND A1.major = 'CS' AND A2.major = 'EE';  /* one case they applied CS, another case they applied EE */


e.g. Find all sID of students who applied major CS BUT NOT major EE

SELECT sID FROM Apply WHERE major = 'CS'
EXCEPT
SELECT sID FROM Apply WHERE major = 'EE';

SELECT DISTINCT A1.sID 
FROM Apply A1, Apply A2
WHERE A1.major = 'CS'
AND A2.major <> 'EE';

-----------------------------------------------------------------------------------------------------------
Subqueries in WHERE clause


e.g Find IDs and names of all students who applied to major in CS at some college (2 methods):

method 1: subquery

SELECT sID, sName
FROM Student
WHERE sID IN (                      /* Student.sID IN Apply.sID */
               SELECT sID           /*subquery finds the sID of all the students who applied to major CS*/
               FROM Apply
               WHERE major = 'CS'
);

*outer query, lets take that sID and lets select their sID and sName. IN - sID in sID

method 2: JOIN

SELECT DISTINCT Student.sID, sName
FROM Student, Apply
WHERE Student.sID = Apply.sID 
AND Apply.major = 'CS';


/* Why do we care about duplicates? E.g. If we have two Craigs (sName) but they are different people sID are different.
If we SELECT DISTINCT on sID, both Craigs will show up, but if we SELECT DISTINCT on sName, only one Craig will show up). */

/* E.g. duplicates are important: average GPA of CS applicants */

SELECT GPA
FROM Student
WHERE Student.sID IN (
    SELECT Apply.sID
    FROM Apply
    WHERE major = 'CS');
    
*only subquery version gives us the correct values; the join version does not give us the correct values
    
/* e.g. find students who applied to major CS but not to major EE */

SELECT sID, sName
FROM Student                                         /* looks for a student
WHERE Student.sID IN (                               /* where the student ID is among the set of ID
                      SELECT sID                        of students who applied to CS
                      FROM Apply
                      WHERE major = 'CS')
AND Student.sID NOT IN (                             /* but student ID is NOT among the set of ID 
                      SELECT sID                        of students who applied to EE
                      FROM Apply
                      Where major = 'EE');

or we can write

SELECT sID, sName
FROM Student                  
WHERE Student.sID IN (        
    SELECT sID                    
    FROM Apply
    WHERE major = 'CS')
AND NOT Student.sID IN (      /* AND NOT Student.sID IN instead of AND Student.sID NOT IN
    SELECT sID                 
    FROM Apply
    Where major = 'EE');
    
    
e.g. Find all colleges such that there are some other college in the same state - return name and state. *We use EXIST to test
whether the subquery is empty or not empty rather than checking whether the values are in the subquery (IN). 
Correlated reference = inside the subquery, we will refer to a value C1, that comes from outside the subquery.

SELECT cName, state
FROM College C1
WHERE EXISTS(                                  /* for each college, check does it exist another college C2 where the state of C1 = C2 */
    SELECT *
    FROM College C2
    WHERE C2.state = C1.state AND C1.cName <> C2.cName);


e.g. Find the college with the largest enrollment (without using MAX) - return college name

SELECT cname
FROM College C1
WHERE NOT EXISTS (
                  SELECT * FROM College C2
                  WHERE C2.enrollment > C1.enrollment); /*find all college where it does not exist another college whose enrollment is higher than the one we are returning

Exists test for existence of record. Returns true if it exists.

e.g. (1) Find student with the highest GPA - using SUBQUERY

SELECT sID, sName, GPA
FROM Student S1
WHERE NOT EXISTS(
                 SELECT *
                 FROM Student S2
                 WHERE S2.GPA > S1.GPA);
           
           
e.g. (2) Lets see if we can write the above query without using a sub-query, we will need some type of JOIN.         

SELECT DISTINCT S1.sName, S1.GPA
FROM Student S1, Student S2
WHERE S1.GPA > S2.GPA;

*query is fundamentally wrong. cannot write it by using just joins. Finds all students, such that there is some
other student whose GPA is lower. Find all the GPAs except the lowest GPA.


e.g. (3) Find the student with the highest GPA - using ALL

SELECT sID, sName, GPA
FROM Student
WHERE GPA >= ALL (              /*ALL tells us instead of telling us whether the value is in or not in, it checks whether the value has a certain relationship with ALL the relationship 
                  SELECT GPA    /*is GPA greater or equal than all of the elements of the subquery that returns the GPA of all students
                  FROM Student);

*if the student's GPA is greater or equal to all the GPA from Student, then the student's GPA is the highest


e.g. (4) Find the student with highest GPA - use greater than ALL.

*ALL - check whether the value has a relationship with all of the result of the subquery.
*ANY - companion, says you must just satisfy with at least one element of the set.

SELECT sName
FROM Student S1
WHERE GPA > ALL (
                 SELECT GPA 
                 FROM Student S2
                 WHERE S2.sID <> S1.sID);
                 
*We get an empty result - query is incorrect. This looks for all student that has HIGHEST. But we have 4 students with 3.9 GPA.
Therefore, none of them will satisfy the query. If every student's GPA was unique, then this query will work.


e.g. (1) Find the college with highest enrollment - using ALL

SELECT cName, enrollment
FROM College C1
WHERE enrollment > ALL (
                          SELECT enrollment
                          FROM College C2             /*need to create C2 so we can put WHERE c1.cname <> c2.cname
                          WHERE C1.cName <> C2.cName);

e.g. (2) Find the college with highest enrollment - using ANY

SELECT cName, enrollment
FROM College C1
WHERE NOT enrollment <= ANY (
                          SELECT enrollment
                          FROM College C2
                          WHERE C1.cName <> C2.cName);

*Get the college that is NOT the case that the enrollment is less than or equal to any other college
In other words, there is no other college with a larger enrollment.
**Predicate logic. Equivalent.


e.g. Find students who are not from the smallest high school - using ANY

SELECT sID, sName, sizeHS
FROM Student
WHERE sizeHS > ANY (SELECT sizeHS
                    FROM Student);
                    
*SQLite does not support ALL or ANY operator - we can use EXISTS or NOT EXISTS to get around this

SELECT sID, sName, sizeHS
FROM Student S1
WHERE EXISTS (                      /*look for a student, where there exists
              SELECT * 
              FROM Student S2       /*some other student S2 whose HS is smaller than the student we return
              WHERE S2.sizeHS < S1.sizeHS); 

*ANY or ALL are very convenient, but they are not necessary. We can use EXISTS or NOT EXISTS.


e.g. Students who applied to CS but not EE - using ANY 

SELECT sID, sName
FROM Student
WHERE sID = ANY (SELECT sID FROM Apply WHERE major = 'CS')
  AND sID <> ANY (SELECT sID FROM Apply WHERE major = 'EE');


*wrong answer. This query asks for students where their ID is in the set of ID in CS.
sID <> ANY - we want the condition to check whether there is any element
in the set of EE, that is not equal to the sID. This condition is satisfied as long
as there is ANYBODY who applied to EE that is not equal to the student we're looking at.
That is commonly the case.

Quick tricky to use ANY or ALL operators to get the answer all the time.

SELECT sID, sName
FROM Student
WHERE sID = ANY (SELECT sID FROM Apply WHERE major = 'CS')
  AND NOT sID <> ANY (SELECT sID FROM Apply WHERE major = 'EE');

*For each member of the set of EE application, that value is NOT equal to the sID
of the student we are going to retrieve.

------------------------------------------------------------------------------------------------------------
Subqueries in FROM and SELECT clauses

Above, we used subqueries in the WHERE = condition for comparison

Can use subqueries in:

SELECT  - writing a sub-select expression that produces the value that comes out of the query
FROM    - running a nested select stmt that is going to generate one of the table that we will use in the rest of the query

/* e.g. return all students whose scaled GPA changes GPA by more than 1 */

SELECT sID, sName, GPA, GPA*(sizeHS/1000.0) AS scaledGPA
FROM Student
WHERE GPA*(sizeHS/1000.0) - GPA > 1.0
OR
GPA - GPA*(sizeHS/1000.0) > 1.0;

to simplify:

SELECT sID, sName, GPA, GPA*(sizeHS/1000.0) AS scaledGPA
FROM Student
WHERE abs(GPA*(sizeHS/1000.0) - GPA) > 1.0;

to simplify further: put subquery in FROM clause. Create a select from where
that produces a relation, and the rest of the query can treat that just
as a relation so we can refer to it.

SELECT *
FROM (SELECT sID, sName, GPA, GPA*(sizeHS/1000.0) AS scaledGPA
FROM Student) G                                                /*turn it into its own subquery and put it in FROM clause and call it G
WHERE abs(G.scaled GPA - GPA) > 1.0;

/* this says compute the from where expression and call the result G 
and now in the rest of the query, anytime I refer to G, I refer to the 
result of the subquery in the FROM. Specifically, I now have scaledGPA.
And I can use that scaled GPA in the rest of my query. Before I do the subquery, I cannot use scaledGPA*/


/* subquery in the select clause */ harder

/*Find colleges and pair those colleges with the highest GPA of their applicants.
Return college name, state and GPA of students.*/

SELECT DISTINCT College.cName, College.state, Student.GPA
FROM College, Apply, Student 
WHERE College.cName = Apply.cName
AND Apply.sID = Student.sID
AND GPA >= ALL (                  /*where GPA is the highest among the GPAs of the students who applied to that same college*/
    SELECT Student.GPA 
    FROM Student, Apply
    WHERE Student.sID = Apply.sID
    AND Apply.cName = College.cName);

/* The ANY operator returns true if any of the subquery values meet the condition.
The ALL operator returns true if all of the subquery values meet the condition. */

/*Now lets re-write this query using a sub-query in the SELECT clause 
What a subquery in a SELECT clause does is performs a computation and as long as the computation returns exactly one value, that value
is used in the result tuple.
*/

HARDER

SELECT cName, state,(
                     SELECT DISTINCT GPA                 /*just want to return highest GPA - for the subquery SELECT*/
                     FROM Apply, Student                 /*do not need the college table anymore, but doesn't seem to affect the result*/
                     WHERE College.cName = Apply.cName
                     AND Apply.sID = Student.sID
                     AND GPA >= ALL(
                                    SELECT GPA 
                                    FROM Student, Apply
                                    WHERE Student.sID = Apply.sID
                                    AND Apply.cName = College.cName)
                    ) AS GPA                                            /*call the whole subquery GPA*/
FROM College;

e.g. Instead of pairing every college with the highest GPA of the applicants, we want to pair college
with names of the applicants

SELECT cName, state,(
                    SELECT DISTINCT sName
                    FROM Apply, Student
                    WHERE College.cName = Apply.cName
                    AND Apply.sID = Student.sID
                    ) AS sName
FROM College;

-> ERROR: the SELECT subquery did not return exactly one value. In this case
we have several students apply to colleges, so wouldn't know when we have a bunch of values in the result
which one to put in the tuple being constructed. 

ERROR message says: Subquery returns more than 1 row.

--------------------------------------------------------------------------------------------------------
The JOIN family of operators 

We have implicit and also explicit JOIN tables.

- Inner Join on condition
- Natural join (eliminates duplicates columns created)
- Inner join USING (attrs) 
- Left | Right | Full Outer Join

Using comma to join is a cross product

e.g. SELECT * 
     FROM Apply, Student, College

Natural join example:
SELECT DISTINCT sName, major
FROM Student, Apply
WHERE Student.sID = Apply.sID;

Theta join (inner join) example:

SELECT DISTINCT sName, major
FROM Student INNER JOIN Apply       /*JOIN is an abbreviation for INNER JOIN - can delete INNER */
ON Student.sID = Apply.sID          /*Use JOIN ON instead of WHERE */


e.g. Find name and GPA of student whose HS is less than 1000, major is in CS and went to Stanford

SELECT sName, GPA
FROM Student JOIN Apply
ON Student.sID = Apply.sID
AND sizeHS < 1000 AND major = 'CS' AND cName 'Stanford';


*When do we use WHEN or AND?

AND condition - if we put all the conditions "AND sizeHS < 1000 AND major = 'CS' AND cName 'Stanford'"
in the ON condition, we are saying, as the query processor does the JOIN,
it should be applying all the conditions. 

WHERE condition - says, here's the condition that really applies to the combination of the tuples
and the rest of the conditions apply to the separate attributes.

e.g. Find a bunch of information about student applications. Join all three of our tables.

SELECT Apply.sID, sName, GPA, Apply.cName, enrollment
FROM Apply JOIN Student JOIN College
ON Apply.sID = Student.sID AND Apply.cName = College.cName;


With postgresql (cannot do 3 way join):

SELECT Apply.sID, sName, GPA, Apply.cName, enrollment
FROM (Apply JOIN Student ON Apply.sID = Student.sID) JOIN College        /*postgresql does not allow 3 way joins, otherwise can just do JOIN JOIN */
ON Apply.cName = College.cName;

Interaction between expression of a query in SQL and the query processor

SQL systems do tend to actually follow the structure that is provided when we have join operators and we parenthesize them
People do tune SQL to enhance performance by changing order around.


*Natural join takes two relations that have column names in common and performs a 
cross product that only keeps the tuples that have the same value in those
common attribute names.

e.g. 
SELECT DISTINCT sName, major
FROM Student NATURAL JOIN Apply;

is the same as:

SELECT DISTINCT sName, major
FROM Student INNER JOIN Apply
ON Student.sID = Apply.sID;


e.g.

SELECT sName, GPA
FROM Student NATURAL JOIN Apply
WHERE sizeHS < 1000 AND major = 'CS' and cName = 'Stanford';


e.g. 
There a feature in SQL that is considered better practice than using the natural join
and it's called the USING clause.

USING - explicitly lists the attributes that should be equated across the relations.

SELECT sName, GPA
FROM Student JOIN Apply USING(sID)          /* we can only use the USING clause on attributes that appear in both relations */
WHERE sizeHS < 1000 AND major = 'CS' and cName = 'Stanford';


e.g. Combine two instances of the student relation in order to find paris of students that have same GPA

SELECT S1.sID, S1.sName, S1.GPA, S2.SID, S2.sName, S2.GPA
FROM Student S1 JOIN Student S2 USING(GPA)
WHERE S1.sID < S2.sID               /*most SQL systems do not allow you to use USING and JOIN ON */

e.g. Get the Student relation

SELECT * 
FROM Student S1 natural JOIN Student S2;

e.g. Outer join

e.g. Information about students who have not applied anywhere yet

SELECT sName, sID, cName, major
FROM Student LEFT JOIN Apply using(sID); /* LEFT JOIN = LEFT OUTER JOIN */

SELECT sName, sID, cName, major
FROM Student NATURAL LEFT JOIN Apply; /*implicitly (or natural) join Student with Apply on sID - not recommended */


e.g. Can re-write the outer join without using outer join

SELECT sName, Student.sID, cName, major
FROM Student, Apply                 /*inner join of Student and Apply so all tuples matches*/
WHERE Student.sID = Apply.sID       /*cross product form */
UNION                               /*add to that result - union of the result
SELECT sName, sID, NULL, NULL       /* return sName, sID, NULL and NULL
FROM Student                        /*Student tuple
WHERE sID NOT IN (                  /*that don't have a matching tuple in Apply
    SELECT sID                      /*sID that does not appear in the Apply
    FROM Apply
);

e.g. RIGHT OUTER JOIN:

SELECT sName, sID, cName, major
FROM Student NATURAL RIGHT OUTER JOIN Apply;

e.g. Unmatched tuples from both LEFT AND RIGHT in our result (full outer join):

SELECT sName, sID, cName, major
FROM Student FULL OUTER JOIN Apply USING(sID);

e.g. Can express full outer join using combination of left and right outer join:

SELECT sName, sID, cName, major
FROM Student LEFT OUTER JOIN Apply USING(sID)
UNION                                           /* UNION auto removes duplicates */
SELECT sName, sID, cName, major
FROM Student RIGHT OUTER JOIN Apply USING(sID)

e.g. Can simulate without using any JOINs at all - 3 parts:

SELECT sName, Student.sID, cName, major
FROM Student, Apply                     /*find all of the matching student and apply records
WHERE Student.sID = Apply.sID
UNION
SELECT sName, sID, NULL, NULL
FROM Student                             /*adds those students who are not in apply
WHERE sID NOT IN (SELECT sID FROM Apply)
UNION
SELECT NULL, sID, cName, major      
FROM Apply
WHERE sID NOT IN (SELECT sID FROM Student); /*find those apply records where there's not a matching student */


e.g.
Commutativity (A op B) = (B op A)       /*most joins are like that except left and right outer join
Associativity (A op B) op C = A op (B op C)         /*can do in any order first - OUTER JOIN is not associative 

-----------------------------------------------------------------
Aggregation

Agg performs computations over sets of values in multiple rows of a relation.

MIN, MAX, SUM, AVG, COUNT

appear in SELECT clause initially. 

GROUP BY - partition into groups 
HAVING conditions - test filters on results of aggregate values - apply to groups that we generated from GROUP BY clause

e.g. computer average of GPA - will calculate average of all the rows

SELECT AVG(GPA)
FROM Student;

e.g. Find min GPA of students who applied in CS

SELECT MIN(GPA)
FROM Student, Apply
WHERE Student.sID = Apply.sID AND major = 'CS';

*do not want to count GPA twice if a student applied to CS 2+ at different schools
presumably, we want to only count each student's GPA once no matter how many times they applied

Use subquery form instead.

1st: Lets see how many students applied to CS first:

SELECT *
FROM Student
WHERE sID IN(                /*check each student whether their ID is among those who applied to CS - you want the distinct sID*/
             SELECT sID 
             FROM Apply
             WHERE major = 'CS');

**Very important: now, we only have one instance of each student who applied to CS because you chose distinct sID IN

2nd: Lets take the average GPA second:

SELECT AVG(GPA)
FROM Student
WHERE sID IN(
             SELECT sID
             FROM Apply
             WHERE major = 'CS');


e.g. COUNT function - simply returns the number of tuples in the result

1st - run it without the aggregate function - we see there are 2:

SELECT *
FROM College
WHERE enrollment > 15000;

*we see there are two rows 

SELECT COUNT(*)
FROM College
WHERE enrollment > 15000;

*answer gives us two


e.g. Find the number of students who have applied to Cornell

SELECT COUNT (*)
FROM Apply
WHERE cName = 'Cornell';

*Wrong answer: we actually counted the number of applications to Cornell - not number of student who applied to Cornell
For example, if a student applied to Cornell 3 times, we are counting it 3 times in the result.

SELECT COUNT (DISTINCT sID)     /*COUNT will look at the result, and count the DISTINCT values for the particular attribute*/
FROM Apply
WHERE cName = 'Cornell';

*This returns 3 distinct student IDs - **COUNT DISTINCT is very useful**


e.g. Fairly obscure- Gives us all students such that number of other students with same GPA
is equal to number of other students with same sizeHS

SELECT *
FROM Student S1                                          /*looks at student relation
WHERE (SELECT COUNT (*) 
       FROM Student S2    
       WHERE S2.sID <> S1.sID AND S2.GPA = S1.GPA)       /*for each student, count number of other students (S2) by testing ID is different, and have same GPA*/ 
       =                                                 /* "=" and if those two values are the same*/
       (SELECT COUNT(*) 
       FROM Student S2                
       WHERE S2.sID <> S1.sID AND S2.sizeHS = S1.sizeHS); /*also counts the number of other students (S2) is diff by testing ID, and that have same size HS*/ 

*both subqueries produce a single value, which is why we can test equality (if they are the same value)


e.g. Compute amount by which average GPA of students applying to CS exceeds the average GPA of students NOT applying to CS - seems hard
*compute 2 subq in the FROM clause: i) avg GPA of CS applicants ii) avg GPA of non CS applicants

Breakdown of parts:

1) Find the Apply sID who have applied to major CS, and take the sID, match it with Student table's sID. From the Student table's sID
find the AVG(GPA) and call it avgGPA. Answer: 3.633333 (repeating 3)

Take the whole result and name it CS.

(SELECT AVG(GPA) AS avgGPA 
FROM Student
WHERE sID IN (
              SELECT sID
              FROM Apply
              WHERE major = 'CS')) AS CS,     /*COMMA to separate the first subQ from the second subQ)*/    

2) Same thing as above, except find major that is NOT CS. 
Take the whole resutl and name is nonCS. Answer: 3.4857

(SELECT AVG(GPA) AS avgGPA
FROM Student
WHERE sID NOT IN (
                  SELECT sID 
                  FROM Apply
                  WHERE major = 'CS')) AS nonCS
                  
3) Now with the FROM clause, we have a relation called CS with an attribute called avgGPA, and a relation called nonCS with
an attribute called avgGPA.

And in the SELECT clause, we'll simply do the subtraction of the nonCS GPA from the CS GPA.

SELECT CS.avgGPA - nonCS.avgGPA                 /*SELECT to subtract from the two
FROM                                            /*FROM these two subqueries (use as tables)
(SELECT AVG(GPA) AS avgGPA 
FROM Student
WHERE sID IN (
              SELECT sID
              FROM Apply
              WHERE major = 'CS')) AS CS,        /*THE COMMA IS VERY IMPORTANT TO SEPARATE THE TWO SUBQUERIES*/
(SELECT AVG(GPA) AS avgGPA
FROM Student
WHERE sID NOT IN (
                  SELECT sID 
                  FROM Apply
                  WHERE major = 'CS')) AS nonCS;


e.g. We can re-write this with the subquery in the SELECT clause. In the SELECT clause,
we can write a subquery as long as it returns a SINGLE VALUE .

Changes from previous query:

                                           /*take out the whole first line - SELECT CS.avgGPA - nonCS.avgGPA */
SELECT DISTINCT(                           /*replace FROM with a SELECT */
SELECT AVG(GPA) AS avgGPA 
FROM Student
WHERE sID IN (
              SELECT sID
              FROM Apply
              WHERE major = 'CS')) -       /*take out the AS CS here - replace with a minus */
(SELECT AVG(GPA) AS avgGPA
FROM Student
WHERE sID NOT IN (
                  SELECT sID 
                  FROM Apply
                  WHERE major = 'CS')) AS d    /*replace the AS - required*/
FROM Student;                                   /*need a FROM clause*/

*We got the avgGPA of CS Student in the SELECT clause producing a value. We perform the subtraction as part of the SELECT clause.
The last thing we need is something in the FROM clause.


redid last time:
SELECT DISTINCT(
    SELECT avg(GPA) as avgGPA       /*average GPA of CS student in SELECT clause producing a value
    FROM Student
    WHERE sID IN(
        SELECT sID
        FROM Apply
        WHERE major = 'CS')) -
    (SELECT avg(GPA) as avgGPA FROM Student     /*avg GPA of NON CS student 
     WHERE sID NOT IN(
        SELECT sID FROM Apply WHERE major = 'CS')) AS d   /*call the result of the subtraction as d for difference
FROM Student;
        
*perform subtraction as part of the SELECT clause 
- reason for duplicates is because we computed this result once for each tuple in Student.


NEW LESSON: GROUP BY clause - only use in conjunction with aggregation - takes a relation and partitions it by values of a set of attributes

e.g. Find number of applications to each college - breaking it into groups, where each group has the College name. For each group,
we will return one tuple for the result.

SELECT cName, COUNT(*)      /*perform aggregation - in this case COUNT(*)*/
FROM Apply       
GROUP BY cName;


e.g. find total enrollment of college students for each state

SELECT state, SUM(enrollment)
FROM College                
GROUP BY state;

*takes college relation and breaks it by state and then within each group, return state for that partition and sum of the enrollment 


e.g. For each college and major combination, the min and max GPAs for the student who have applied to that college

SELECT cName, major, MIN(GPA), MAX(GPA)
FROM Student, Apply
WHERE Student.sID = Apply.sID
GROUP BY cName, major;


e.g. Find difference between min and max of GPA (spread) or find largest spread 

1st step: take above query and put it in the FROM clause, and call it M

FROM(SELECT cName, major, MIN(GPA), MAX(GPA)
FROM Student, Apply
WHERE Student.sID = Apply.sID
GROUP BY cName, major) AS M;

2nd step: In the SELECT clause, we can now access the aggregate here. And call MIN(GPA) as MN, and MAX(GPA) as MX

SELECT mx-mn                      /*get list of spreads of max and min GPA for each college and major*/
FROM(SELECT cName, major, MIN(GPA) AS mn, MAX(GPA) AS mx
FROM Student, Apply
WHERE Student.sID = Apply.sID
GROUP BY cName, major) AS M;      /*AS M might not be needed.... - yepp not needed in SQLite*/

3rd step: SELECT the MAX for the largest spread

SELECT MAX(mx-mn)                      /*get list of spreads of max and min GPA for each college and major*/
FROM(SELECT cName, major, MIN(GPA) AS mn, MAX(GPA) AS mx
FROM Student, Apply
WHERE Student.sID = Apply.sID
GROUP BY cName, major) AS M;      /*AS M might not be needed.... - yepp not needed in SQLite*/


e.g. Introduces subtleties of the GROUP BY clause.
Find the number of colleges that have been applied to by each student.

SELECT Student.sID, sName, COUNT(DISTINCT cNAME)
FROM Student, Apply
WHERE Student.sID = Apply.sID
GROUP BY Student.sID

*The above worked out fine in this case. But we will see in the next example that adding an attribute to SELECT clause
in case of GROUP BY may make it strange. It worked nicely in this case is because when we GROUPED BY sID, within each group
we have the same student name. Example for sID 123, we have all Amy, sID 345, we have all Craig. So when we choose sName in the 
SELECT clause in the GROUP BY query, it was okay because for each group, we had the same name of the student. When that is not the case,
we should presumably get an error, but not all servers do that.

*If we choose to select an attribute that is not in the one of the grouping
attributes, then it chooses a random value


e.g. Lets say we are not only interested in finding the studetn name, but we are further going to add a college name

SELECT Student.sID, sName, COUNT(DISTINCT cName), cName
FROM Student, Apply
WHERE Student.sID = Apply.sID
GROUP BY Student.sID;

*For example, student ID 123, Amy, has applied to 3 distinct colleges, but for some reason cName randomly returns only Stanford...
ERROR/ISSUE.

*What this system is actually doing, is that when we include in the SELECT clause of a GROUPING query, 
and we put in the SELECT clause an attribute that is not one of the GROUPING attributes, it CHOOSES a RANDOM VALUE
from the group to include!!!! In the case of sName, the random value was always the same because the sName was always
the same for the same sID. However, for the cName, that is not the case. So it chose a random value among the colleges.
SQLite and MYSQL allows this behavior. Postgresql will throw an error in this case. 


e.g. Find number of colleges applied to by each student.

SELECT Student.sID, COUNT(DISTINCT cName0
FROM Student, Apply
WHERE Student.sID = Apply.sID
GROUP BY Student.sID;

*now.... there may be students in the DB who have not applied to any colleges, and they will not be 
represented in the results because they will not be in the result of the join. JOIN leaves out the NULL values.

e.g. What if we wanted toa ctually find the student IDs who haven't applied to anywhere and include a zero in the result.

Therefore, we need this query:

SELECT Student.sID, COUNT(DISTINCT cName)
FROM Student, Apply
WHERE Student.sID = Apply.sID 
GROUP BY Student.sID

UNION

SELECT sID, 0                     /*students that have not applied to any colleges will return 0 - return sID and 0 if meets condition*/
FROM Student
WHERE Student.sID NOT IN (        /*sID NOT IN the set of sID in Apply table relation*/ 
                          SELECT sID 
                          FROM Apply);


e.g. The last clause to introduce: HAVING clause - only used in conjunction with aggregation
*HAVING clause allows us to APPLY conditions to the results of aggregate functions. HAVING clause is entire group
WHERE applies to one tuple at a time

e.g. Find colleges with fewer than 5 applications

SELECT cName
FROM Apply
GROUP BY cName
HAVING COUNT(*) < 5;

*Can write without the HAVING clause and the GROUP BY clause

e.g.

SELECT DISTINCT cName
FROM Apply A1                         /*add a table variable - A1*/
WHERE 5 > (
          SELECT COUNT(*) 
          FROM Apply A2 
          WHERE A2.cName = A1.cName); /*check number of other application to same college and count them and see if the number is less than 5


*Look at each application record, now named A1. And we are checking whether the number of other applications to to the same college
(A2.cName = A1.cName) and COUNT them, and we're going to see if that number is less than 5. 


*****Can re-write every GROUP BY and HAVING without using them!!!****


e.g. Fewer than 5 applicants (not application) - instead of counting the number of apply tuples for each college, 
we count the number of distinct student ID that appear in the group of apply tuple for that college.

SELECT cName
FROM Apply
GROUP BY cName
HAVING COUNT (DISTINCT sID) < 5;

*Cornell has at least 5 applications but fewer than 5 applicants... so this means at least one applicant has applied to Cornell
twice or more. i.e. an applicant applied to Cornell but for different majors.


e.g. Find all majors represented in the DB where the applicant's MAX(GPA) of a student applying for that major
is below the average GPA in the DB.

SELECT major
FROM Student, Apply
WHERE Student.sID = Apply.sID
GROUP BY major                                      /*GROUP BY the major, so we can look at each major one at a time*/
HAVING MAX(GPA) < (SELECT AVG(GPA)                  /*Within the major, we look at the maximum GPA of a student applying for that major
                    FROM Student);                    and we check whether its lower than the average GPA in the student relation*/


*Bioengineering and psychology has applicants whose highest GPA is lower than the average GPA in the DB.*/


---------------------------------------------
NULL values





